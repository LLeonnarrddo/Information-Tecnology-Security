#!/usr/sbin/nft -f

flush ruleset

table inet filter {
        chain debug {
                type filter hook prerouting priority 101;
                ip protocol { tcp,udp } meta nftrace set 1;
        }

        chain input {
                type filter hook input priority filter;
        }

        chain forward {
                type filter hook forward priority 0; policy drop;

                ct state established,related counter accept

                udp dport 53 ip daddr 10.10.10.100 counter accept
                tcp dport 53 ip daddr 10.10.10.100 counter accept

                udp dport 53 ip daddr 193.137.16.75 counter accept

                udp dport 53 ip daddr 1.1.1.1 counter accept

                tcp dport 53 ip daddr 192.168.43.240 counter accept

                udp dport 53 ip daddr 8.8.8.8 counter accept

                tcp dport 25 ip daddr 10.10.10.100 counter accept

                tcp dport {110,143} ip daddr 10.10.10.100 counter accept

                tcp dport {80,443} ip daddr 10.10.10.100 counter accept

                udp dport 1194 ip daddr 10.10.10.100 counter accept

                ip protocol icmp counter accept

                ip saddr 192.168.43.240 ip daddr 10.20.20.100 tcp dport 2022 counter accept

                ip saddr 192.168.43.240 ip daddr 10.20.20.100 tcp dport 22 ct count 2 counter accept

                ip saddr 10.20.20.0/24 oif "eth0" tcp dport {ssh} counter accept

                ip saddr 10.20.20.0/24 oif "eth0" tcp dport {http, https} counter accept

                ip saddr 192.168.43.240 ip daddr 10.10.10.100 tcp dport 3306 counter accept

        }

        chain output {
                type filter hook output priority filter;
        }
}

define guarded_ports = {ssh}

table inet portknock {
        chain debug{
                type filter hook prerouting priority -301;
                # meta nftrace set 1 # For everything
                ip protocol {tcp} meta nftrace set 1 # Only for TCP and ICMP packets
        }

        set clients_ipv4 {
                type ipv4_addr
                flags timeout
                counter
        }

        set candidates_ipv4 {
                type ipv4_addr . inet_service
                flags timeout
                counter
        }

        chain input {
                type filter hook input priority -10; policy accept;

                iifname "lo" return

                tcp dport 123 add @candidates_ipv4 {ip  saddr . 234 timeout 60s}
                tcp dport 234 ip saddr . tcp dport @candidates_ipv4 add @candidates_ipv4 {ip saddr . 345 timeout 60s}
                tcp dport 345 ip saddr . tcp dport @candidates_ipv4 add @candidates_ipv4 {ip saddr . 456 timeout 60s}
                tcp dport 456 ip saddr . tcp dport @candidates_ipv4 add @candidates_ipv4 {ip saddr . 567 timeout 60s}
                tcp dport 567 ip saddr . tcp dport @candidates_ipv4 add @clients_ipv4 {ip saddr timeout 60s} log prefix "Successful portknock: "

                #Allow SSH
                tcp dport $guarded_ports ip  saddr @clients_ipv4 counter accept
                tcp dport $guarded_ports ct state established,related counter accept

                # Reject the remaining
                #tcp dport $guarded_ports counter reject with tcp reset
                tcp dport $guarded_ports counter drop
        }
}
